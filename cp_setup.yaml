# Configuration for recording two channels with mimoCoRB
#  -----------------------------------------------------
#
# configure two buffers:
#  - RB_1 for raw waveforms
#  - RB_2 for derived pulse parameters
#  data from RB_2, the result buffer, are saved to a file in csv (text) format.
#
#  - data from RB_1 are also passed to an obsever process driving a real-time display
#  - data from RB_2 are passed to a Reader process driving a real-time histogram display
#
# Notes:
# 
#    1. additional config files controlling the user functions are
#       located in the subdirectory config/
#    2. necessary application-specific user code is located
#       in the subdirectory modules/
#
# ----------------------------------------------------------------------------
#

RingBuffer:
  # define ring buffers
  - RB_1:
      # raw input data buffer (from redPitaya)
      number_of_slots: 100
      channel_per_slot: 1000
      data_type:
          1: ['ch1', "int16"]
          2: ['ch2', "int16"]
  - RB_2:
      # filtered data buffer (coincidence of peaks, clipping)
      number_of_slots: 100
      channel_per_slot: 1000
      data_type:
          1: ['ch1', "int16"]
          2: ['ch2', "int16"]




Functions:
  # define functions and ringbuffer assignment

  - Fkt_main:
      config_file: "config/coincidence_config.yaml"

    # Read Data from redP or File
- Fkt_1:
       file_name: "rpDAQ"
       fkt_name: "rp_mimocorb"
       #file_name: "modules/file_source"
       #fkt_name: "tar_parquet_source"
       num_process: 1
       RB_assign:
           RB_1: "write"
    
  - Fkt_2:
       file_name: "modules/filter_client"
       fkt_name: "filter"
       num_process: 4
       RB_assign:
           RB_1: "read"
           RB_2: "write"


    # Save Data to Parquet
  - Fkt_3:
       file_name: "modules/exporters"
       fkt_name: "save_parquet"
       num_process: 1
       RB_assign:
           RB_2: "read"


# --- the following functions are optioal 	   

  - Fkt_4:
      file_name: "modules/plot_waveform"
      fkt_name: "plot_waveform"
      num_process: 1
      RB_assign:
           RB_2: "observe"
